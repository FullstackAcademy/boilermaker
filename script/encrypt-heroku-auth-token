#!/usr/bin/env bash

set -e

function cleanup_at_exit {
    # remove temporary key file
    rm -f tmp.json
    rm -f tmp.pem
}

# Any errors trigger the above cleanup function
trap cleanup_at_exit EXIT

# Get the repo name from the `origin` git remote.
export REPO=$(git remote get-url origin | \
    sed 's/^.*[\/:]\([^\/:]*\)\/\([^\/]*\)$/\1\/\2/' | \
    sed 's/^\(.*\)\.git$/\1/'
)

# This function provides a nicer error message in some cases
function public_key_not_found {
    cat <<-"HEREDOC"
	Boilermaker Error: Unable to download public key.
	Make sure your origin remote (try git remote -v) matches your GitHub repo url.
	The Travis url for the public key is based on your GitHub repo url.
	These can fall out of sync if you rename your GitHub organization or repo.
	This script tells Travis to expect your repo to be here:
	HEREDOC
    echo https://github.com/$REPO
}

# Get the Travis public key for this repo.
trap public_key_not_found ERR
curl --fail --silent https://api.travis-ci.org/repos/$REPO/key > tmp.json
trap - ERR

export TRAVIS_KEY=$(cat tmp.json)

# Save the key to a file.
node -e "console.log($TRAVIS_KEY['key'])" > tmp.pem

# Generate a Heroku token, encrypt and encode it and print it in YAML.
echo -n $(heroku auth:token) | \
    openssl rsautl -encrypt -pubin -inkey tmp.pem | \
    base64 | awk '{print "    secure: "$1}'
